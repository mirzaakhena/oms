// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import context "context"
import mock "github.com/stretchr/testify/mock"
import port "github.com/mirzaakhena/oms/usecase/createorder/port"

// CreateOrderOutport is an autogenerated mock type for the CreateOrderOutport type
type CreateOrderOutport struct {
	mock.Mock
}

// CreatePayment provides a mock function with given fields: ctx, req
func (_m *CreateOrderOutport) CreatePayment(ctx context.Context, req port.CreatePaymentRequest) (*port.CreatePaymentResponse, error) {
	ret := _m.Called(ctx, req)

	var r0 *port.CreatePaymentResponse
	if rf, ok := ret.Get(0).(func(context.Context, port.CreatePaymentRequest) *port.CreatePaymentResponse); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*port.CreatePaymentResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, port.CreatePaymentRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllMenuItemPrice provides a mock function with given fields: ctx, req
func (_m *CreateOrderOutport) GetAllMenuItemPrice(ctx context.Context, req port.GetAllMenuItemPriceRequest) (*port.GetAllMenuItemPriceResponse, error) {
	ret := _m.Called(ctx, req)

	var r0 *port.GetAllMenuItemPriceResponse
	if rf, ok := ret.Get(0).(func(context.Context, port.GetAllMenuItemPriceRequest) *port.GetAllMenuItemPriceResponse); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*port.GetAllMenuItemPriceResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, port.GetAllMenuItemPriceRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLatestIndexID provides a mock function with given fields: ctx, req
func (_m *CreateOrderOutport) GetLatestIndexID(ctx context.Context, req port.GetLatestIndexIDRequest) (*port.GetLatestIndexIDResponse, error) {
	ret := _m.Called(ctx, req)

	var r0 *port.GetLatestIndexIDResponse
	if rf, ok := ret.Get(0).(func(context.Context, port.GetLatestIndexIDRequest) *port.GetLatestIndexIDResponse); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*port.GetLatestIndexIDResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, port.GetLatestIndexIDRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOrderFinishNotifyURL provides a mock function with given fields: ctx, req
func (_m *CreateOrderOutport) GetOrderFinishNotifyURL(ctx context.Context, req port.GetOrderFinishNotifyURLRequest) (*port.GetOrderFinishNotifyURLResponse, error) {
	ret := _m.Called(ctx, req)

	var r0 *port.GetOrderFinishNotifyURLResponse
	if rf, ok := ret.Get(0).(func(context.Context, port.GetOrderFinishNotifyURLRequest) *port.GetOrderFinishNotifyURLResponse); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*port.GetOrderFinishNotifyURLResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, port.GetOrderFinishNotifyURLRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SaveOrder provides a mock function with given fields: ctx, req
func (_m *CreateOrderOutport) SaveOrder(ctx context.Context, req port.SaveOrderRequest) (*port.SaveOrderResponse, error) {
	ret := _m.Called(ctx, req)

	var r0 *port.SaveOrderResponse
	if rf, ok := ret.Get(0).(func(context.Context, port.SaveOrderRequest) *port.SaveOrderResponse); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*port.SaveOrderResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, port.SaveOrderRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
