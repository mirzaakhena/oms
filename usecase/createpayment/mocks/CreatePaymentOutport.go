// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import context "context"
import mock "github.com/stretchr/testify/mock"
import port "github.com/mirzaakhena/oms/usecase/createpayment/port"

// CreatePaymentOutport is an autogenerated mock type for the CreatePaymentOutport type
type CreatePaymentOutport struct {
	mock.Mock
}

// GenerateID provides a mock function with given fields: ctx, req
func (_m *CreatePaymentOutport) GenerateID(ctx context.Context, req port.GenerateIDRequest) (*port.GenerateIDResponse, error) {
	ret := _m.Called(ctx, req)

	var r0 *port.GenerateIDResponse
	if rf, ok := ret.Get(0).(func(context.Context, port.GenerateIDRequest) *port.GenerateIDResponse); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*port.GenerateIDResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, port.GenerateIDRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLatestUserBalance provides a mock function with given fields: ctx, req
func (_m *CreatePaymentOutport) GetLatestUserBalance(ctx context.Context, req port.GetLatestUserBalanceRequest) (*port.GetLatestUserBalanceResponse, error) {
	ret := _m.Called(ctx, req)

	var r0 *port.GetLatestUserBalanceResponse
	if rf, ok := ret.Get(0).(func(context.Context, port.GetLatestUserBalanceRequest) *port.GetLatestUserBalanceResponse); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*port.GetLatestUserBalanceResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, port.GetLatestUserBalanceRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUser provides a mock function with given fields: ctx, req
func (_m *CreatePaymentOutport) GetUser(ctx context.Context, req port.GetUserRequest) (*port.GetUserResponse, error) {
	ret := _m.Called(ctx, req)

	var r0 *port.GetUserResponse
	if rf, ok := ret.Get(0).(func(context.Context, port.GetUserRequest) *port.GetUserResponse); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*port.GetUserResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, port.GetUserRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SavePayment provides a mock function with given fields: ctx, req
func (_m *CreatePaymentOutport) SavePayment(ctx context.Context, req port.SavePaymentRequest) (*port.SavePaymentResponse, error) {
	ret := _m.Called(ctx, req)

	var r0 *port.SavePaymentResponse
	if rf, ok := ret.Get(0).(func(context.Context, port.SavePaymentRequest) *port.SavePaymentResponse); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*port.SavePaymentResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, port.SavePaymentRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
